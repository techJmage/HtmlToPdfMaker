<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HtmlToPdfMaker</name>
    </assembly>
    <members>
        <member name="T:HtmlToPdfMaker.Convert">
             <summary>Class to convert html to Pdf</summary>
             <example>
             Usage:
             <code>
             [TestMethod()]
             public void ToPdfTest()
             {
                 List&lt;ContentSet&gt; contentSets = [];
                 contentSets.Add(SetContents("&lt;body&gt;&lt;h3&gt;Спокойной ночи&lt;/h3&gt;&lt;p&gt;शुभ रात्रि&lt;/p&gt;&lt;p&gt;Português para principiantes&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;আমি &lt;/p&gt;&lt;/body&gt;", "&lt;body&gt;&lt;div&gt;&lt;b&gt;Спокойной ночи&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;", "Test Page"));
                 contentSets.Add(SetContents("&lt;body&gt;&lt;div&gt;&lt;h1&gt;Tech J Mage&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt;", "&lt;body&gt;&lt;h3&gt;&lt;u&gt;Header1&lt;/u&gt;&lt;/h3&gt;", "My page"));
                 using Convert cvt = new(contentSets);
                 var data = cvt.ToPdfAsync(CancellationToken.None).Result;
                 File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "\\Pdf\\test2.pdf", data);
                 Assert.IsTrue(data.Length &gt; 0);
            
                 static ContentSet SetContents(string bodyHtml, string headerHtml, string footerHtml)
                 {
                     var header = Content.CreateDefaultStyledHeader(headerHtml);
                     var footer = Content.CreateDefaultStyledFooter(footerHtml);
                     var body = Content.CreateDefaultStyledBody(bodyHtml);
                     return new(body, header, footer);
                 }
             }</code>
             </example>
             <seealso cref="T:Utility.Disposable" />
        </member>
        <member name="M:HtmlToPdfMaker.Convert.#ctor(System.Collections.Generic.IReadOnlyList{HtmlToPdfMaker.ContentSet},System.String,DinkToPdf.Orientation,DinkToPdf.PaperKind)">
             <summary>Class to convert html to Pdf</summary>
             <example>
             Usage:
             <code>
             [TestMethod()]
             public void ToPdfTest()
             {
                 List&lt;ContentSet&gt; contentSets = [];
                 contentSets.Add(SetContents("&lt;body&gt;&lt;h3&gt;Спокойной ночи&lt;/h3&gt;&lt;p&gt;शुभ रात्रि&lt;/p&gt;&lt;p&gt;Português para principiantes&lt;/p&gt;&lt;hr /&gt;&lt;p&gt;আমি &lt;/p&gt;&lt;/body&gt;", "&lt;body&gt;&lt;div&gt;&lt;b&gt;Спокойной ночи&lt;/b&gt;&lt;/div&gt;&lt;/body&gt;", "Test Page"));
                 contentSets.Add(SetContents("&lt;body&gt;&lt;div&gt;&lt;h1&gt;Tech J Mage&lt;/h1&gt;&lt;/div&gt;&lt;/body&gt;", "&lt;body&gt;&lt;h3&gt;&lt;u&gt;Header1&lt;/u&gt;&lt;/h3&gt;", "My page"));
                 using Convert cvt = new(contentSets);
                 var data = cvt.ToPdfAsync(CancellationToken.None).Result;
                 File.WriteAllBytes(AppDomain.CurrentDomain.BaseDirectory + "\\Pdf\\test2.pdf", data);
                 Assert.IsTrue(data.Length &gt; 0);
            
                 static ContentSet SetContents(string bodyHtml, string headerHtml, string footerHtml)
                 {
                     var header = Content.CreateDefaultStyledHeader(headerHtml);
                     var footer = Content.CreateDefaultStyledFooter(footerHtml);
                     var body = Content.CreateDefaultStyledBody(bodyHtml);
                     return new(body, header, footer);
                 }
             }</code>
             </example>
             <seealso cref="T:Utility.Disposable" />
        </member>
        <member name="F:HtmlToPdfMaker.Convert.tempFolder">
            <summary>
            The tempFolder
            </summary>
        </member>
        <member name="F:HtmlToPdfMaker.Convert.handler">
            <summary>
            The http client handler
            </summary>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.ReleaseResources">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.ToPdfAsync(System.Threading.CancellationToken)">
            <summary>
            Converts to pdf.
            </summary>
            <param name="token">The token.</param>
            <returns></returns>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.GeneratePdf(System.Collections.Generic.IEnumerable{DinkToPdf.ObjectSettings})">
            <summary>
            Generates the PDF.
            </summary>
            <param name="objSettings">The object settings.</param>
            <returns></returns>
        </member>
        <member name="M:HtmlToPdfMaker.Convert.HttpImagePattern">
            <remarks>
            Pattern:<br/>
            <code>http(s)?:\\/\\/[\\w\\.\\/\\:\\-]+\\.(?&lt;ext&gt;(png)|(webp))</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a character in the set [Hh].<br/>
            ○ Match a character in the set [Tt] exactly 2 times.<br/>
            ○ Match a character in the set [Pp].<br/>
            ○ Match a character in the set [Ss] atomically, optionally.<br/>
            ○ Match the string "://".<br/>
            ○ Match a character in the set [--/:\w] greedily at least once.<br/>
            ○ Match '.'.<br/>
            ○ "ext" capture group.<br/>
                ○ Match with 2 alternative expressions, atomically.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match an empty string.<br/>
                        ○ Match a character in the set [Nn].<br/>
                        ○ Match a character in the set [Gg].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match an empty string.<br/>
                        ○ Match a character in the set [Ee].<br/>
                        ○ Match a character in the set [Bb].<br/>
                        ○ Match a character in the set [Pp].<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HttpImagePattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the HttpImagePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.HttpImagePattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HttpImagePattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.HttpImagePattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_http_OrdinalIgnoreCase">
            <summary>Supports searching for the string "http".</summary>
        </member>
    </members>
</doc>
